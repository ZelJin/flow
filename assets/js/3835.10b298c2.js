"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[3835],{63835:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>p,metadata:()=>r,toc:()=>d});var o=t(87462),a=(t(67294),t(3905));t(45475);const p={title:"Components",slug:"/react/components"},s=void 0,r={unversionedId:"react/components",id:"react/components",title:"Components",description:"Adding Flow types to your React components is incredibly powerful. After typing",source:"@site/docs/react/components.md",sourceDirName:"react",slug:"/react/components",permalink:"/en/docs/react/components",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/react/components.md",tags:[],version:"current",frontMatter:{title:"Components",slug:"/react/components"},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/en/docs/react"},next:{title:"Event Handling",permalink:"/en/docs/react/events"}},i={},d=[{value:"Functional Components",id:"toc-functional-components",level:2},{value:"Adding Default Props to Functional Components",id:"toc-adding-default-props-to-functional-components",level:3},{value:"Class Components",id:"toc-class-components",level:2},{value:"Adding State",id:"toc-adding-state",level:3},{value:"Using Default Props for Class Components",id:"toc-using-default-props-for-class-components",level:3}],m={toc:d};function l(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Adding Flow types to your ",(0,a.mdx)("a",{parentName:"p",href:"https://react.dev/learn/your-first-component"},"React components")," is incredibly powerful. After typing\nyour component, Flow will statically ensure that you are using the component in\nthe way it was designed to be used."),(0,a.mdx)("h2",{id:"toc-functional-components"},"Functional Components"),(0,a.mdx)("p",null,"Adding Flow types to a functional component is the same as ",(0,a.mdx)("a",{parentName:"p",href:"../../types/functions/"},"adding types to a standard function"),".\nJust create an object type for the props and Flow will ensure that the props passed to the component match up with what is expected."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":9,"startColumn":9,"endLine":9,"endColumn":20,"description":"Cannot get `props.doesNotExist` because property `doesNotExist` is missing in `Props` [1]. [prop-missing]"}]','[{"startLine":9,"startColumn":9,"endLine":9,"endColumn":20,"description":"Cannot':!0,get:!0,"`props.doesNotExist`":!0,because:!0,property:!0,"`doesNotExist`":!0,is:!0,missing:!0,in:!0,"`Props`":!0,"[1].":!0,'[prop-missing]"}]':!0},"import * as React from 'react';\n\ntype Props = {\n  foo: number,\n  bar?: string,\n};\n\nfunction MyComponent(props: Props) {\n  props.doesNotExist; // Error! You did not define a `doesNotExist` prop.\n\n  return <div>{props.bar}</div>;\n}\n\n<MyComponent foo={42} />\n")),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note:")," We import ",(0,a.mdx)("inlineCode",{parentName:"p"},"React")," as a namespace here with\n",(0,a.mdx)("inlineCode",{parentName:"p"},"import * as React from 'react'")," instead of as a default with\n",(0,a.mdx)("inlineCode",{parentName:"p"},"import React from 'react'"),". When importing React as an ES module you may use\neither style, but importing as a namespace gives you access to React's\n",(0,a.mdx)("a",{parentName:"p",href:"../types"},"utility types"),".")),(0,a.mdx)("h3",{id:"toc-adding-default-props-to-functional-components"},"Adding Default Props to Functional Components"),(0,a.mdx)("p",null,"A nice pattern to add default props to functional components is to use\n",(0,a.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment/#default_value"},"destructuring with default values"),".\nBy destructuring the props in the function parameter, you can assign a value to any props that are not passed\nto the component (or passed with the value ",(0,a.mdx)("inlineCode",{parentName:"p"},"undefined"),")."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ntype Props = {\n  foo?: number, // foo is optional to pass in.\n  bar: string, // bar is required.\n};\n\nfunction MyComponent({foo = 42, bar}: Props) {\n  // Flow knows that foo is not null or undefined\n  const baz = foo + 1;\n}\n\n// And we don't need to include foo.\n<MyComponent bar={\"abc\"} />;\n")),(0,a.mdx)("h2",{id:"toc-class-components"},"Class Components"),(0,a.mdx)("p",null,"To Flowify a ",(0,a.mdx)("a",{parentName:"p",href:"https://react.dev/reference/react/Component#defining-a-class-component"},"class component"),", the type of the props can be passed as the first\nargument to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"React.Component")," type. This will have the same effect as adding types\nto the ",(0,a.mdx)("inlineCode",{parentName:"p"},"props")," parameter of a function component."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":10,"startColumn":16,"endLine":10,"endColumn":27,"description":"Cannot get `this.props.doesNotExist` because property `doesNotExist` is missing in `Props` [1]. [prop-missing]"}]','[{"startLine":10,"startColumn":16,"endLine":10,"endColumn":27,"description":"Cannot':!0,get:!0,"`this.props.doesNotExist`":!0,because:!0,property:!0,"`doesNotExist`":!0,is:!0,missing:!0,in:!0,"`Props`":!0,"[1].":!0,'[prop-missing]"}]':!0},"import * as React from 'react';\n\ntype Props = {\n  foo: number,\n  bar?: string,\n};\n\nclass MyComponent extends React.Component<Props> {\n  render(): React.Node {\n    this.props.doesNotExist; // Error! You did not define a `doesNotExist` prop.\n\n    return <div>{this.props.bar}</div>;\n  }\n}\n\n<MyComponent foo={42} />;\n")),(0,a.mdx)("p",null,"Now wherever we use ",(0,a.mdx)("inlineCode",{parentName:"p"},"this.props")," in our React component Flow will treat it as\nthe ",(0,a.mdx)("inlineCode",{parentName:"p"},"Props")," type we defined."),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note:")," If you don't need to use the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Props")," type again you could also\ndefine it inline: ",(0,a.mdx)("inlineCode",{parentName:"p"},"extends React.Component<{ foo: number, bar?: string }>"),".")),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"React.Component<Props, State>")," is a ",(0,a.mdx)("a",{parentName:"p",href:"../../types/generics"},"generic type")," that takes two type\narguments: props and state. The second type argument, ",(0,a.mdx)("inlineCode",{parentName:"p"},"State"),", is optional. By\ndefault it is ",(0,a.mdx)("inlineCode",{parentName:"p"},"undefined")," so you can see in the example above we did not include\n",(0,a.mdx)("inlineCode",{parentName:"p"},"State"),". We will learn more about state in the next section..."),(0,a.mdx)("h3",{id:"toc-adding-state"},"Adding State"),(0,a.mdx)("p",null,"To add a type for state to your React class component: create a new object\ntype, in the example below we name it ",(0,a.mdx)("inlineCode",{parentName:"p"},"State"),", and pass it as the second type\nargument to ",(0,a.mdx)("inlineCode",{parentName:"p"},"React.Component"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ntype Props = { /* ... */ };\n\ntype State = {\n  count: number,\n};\n\nclass MyComponent extends React.Component<Props, State> {\n  state: State = {\n    count: 0,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState(prevState => ({\n        count: prevState.count + 1,\n      }));\n    }, 1000);\n  }\n\n  render(): React.Node {\n    return <div>Count: {this.state.count}</div>;\n  }\n}\n\n<MyComponent />;\n")),(0,a.mdx)("p",null,"In the example above we are using a ",(0,a.mdx)("a",{parentName:"p",href:"https://react.dev/reference/react/Component#setstate"},"React ",(0,a.mdx)("inlineCode",{parentName:"a"},"setState()")," updater function"),"\nbut you could also pass a partial state object to ",(0,a.mdx)("inlineCode",{parentName:"p"},"setState()"),"."),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note:")," If you don't need to use the ",(0,a.mdx)("inlineCode",{parentName:"p"},"State")," type again you could also\ndefine it inline: ",(0,a.mdx)("inlineCode",{parentName:"p"},"extends React.Component<{}, { count: number }>"),".")),(0,a.mdx)("h3",{id:"toc-using-default-props-for-class-components"},"Using Default Props for Class Components"),(0,a.mdx)("p",null,"React supports the notion of ",(0,a.mdx)("inlineCode",{parentName:"p"},"defaultProps")," which you can think of as default\nfunction arguments. When you create an element and do not include a prop\nwhich has a default then React will substitute that prop with its corresponding\nvalue from ",(0,a.mdx)("inlineCode",{parentName:"p"},"defaultProps"),". Flow supports this notion as well. To type default\nprops add a ",(0,a.mdx)("inlineCode",{parentName:"p"},"static defaultProps")," property to your class."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"import * as React from 'react';\n\ntype Props = {\n  foo: number, // foo is required.\n  bar: string, // bar is required.\n};\n\nclass MyComponent extends React.Component<Props> {\n  static defaultProps: {foo: number} = {\n    foo: 42, // ...but we have a default prop for foo.\n  };\n}\n\n// So we don't need to include foo.\n<MyComponent bar={\"abc\"} />\n")),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note:")," You don't need to make ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo")," nullable in your ",(0,a.mdx)("inlineCode",{parentName:"p"},"Props")," type. Flow\nwill make sure that ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo")," is optional if you have a default prop for ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo"),".")),(0,a.mdx)("p",null,"If you add a type annotation to ",(0,a.mdx)("inlineCode",{parentName:"p"},"defaultProps")," you can define the type as"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"type DefaultProps = {\n  foo: number,\n};\n")),(0,a.mdx)("p",null,"and spread that into the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Props")," type:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"type Props = {\n  ...DefaultProps,\n  bar: string,\n};\n")),(0,a.mdx)("p",null,"This way you avoid duplicating the properties that happen to have a default value."),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},(0,a.mdx)("strong",{parentName:"p"},"Note:")," You can also apply this format of default props to functional components\nby adding a ",(0,a.mdx)("inlineCode",{parentName:"p"},"defaultProps")," property to a the component function. However, it is generally\nsimpler to use the destructuring pattern described above."),(0,a.mdx)("pre",{parentName:"blockquote"},(0,a.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function MyComponent(props: {foo: number}) {}\nMyComponent.defaultProps = {foo: 42};\n"))))}l.isMDXComponent=!0}}]);