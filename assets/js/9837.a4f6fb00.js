"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9837],{29837:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=t(87462),s=(t(67294),t(3905));t(45475);const o={title:"Type Casting Expressions",slug:"/types/casting"},i=void 0,r={unversionedId:"types/casting",id:"types/casting",title:"Type Casting Expressions",description:"Sometimes it is useful to assert a type without using something like a function",source:"@site/docs/types/casting.md",sourceDirName:"types",slug:"/types/casting",permalink:"/en/docs/types/casting",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/types/casting.md",tags:[],version:"current",frontMatter:{title:"Type Casting Expressions",slug:"/types/casting"},sidebar:"docsSidebar",previous:{title:"Typeof Types",permalink:"/en/docs/types/typeof"},next:{title:"Utility Types",permalink:"/en/docs/types/utilities"}},l={},p=[{value:"Type Cast Expression Syntax",id:"toc-type-cast-expression-syntax",level:2},{value:"Type Assertions",id:"toc-type-assertions",level:2},{value:"Type Casting",id:"toc-type-casting",level:2},{value:"Using type cast expressions",id:"toc-using-type-cast-expressions",level:2},{value:"Type Casting through any",id:"toc-type-casting-through-any",level:3}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,s.mdx)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"Sometimes it is useful to assert a type without using something like a function\nor a variable to do so. For this Flow supports an inline type cast expression\nsyntax which can be used in a number of different ways."),(0,s.mdx)("h2",{id:"toc-type-cast-expression-syntax"},"Type Cast Expression Syntax"),(0,s.mdx)("p",null,"In order to create a type cast expression around a ",(0,s.mdx)("inlineCode",{parentName:"p"},"value"),", add a colon ",(0,s.mdx)("inlineCode",{parentName:"p"},":"),"\nwith the ",(0,s.mdx)("inlineCode",{parentName:"p"},"Type")," and wrap the expression with parentheses ",(0,s.mdx)("inlineCode",{parentName:"p"},"(")," ",(0,s.mdx)("inlineCode",{parentName:"p"},")"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"(value: Type)\n")),(0,s.mdx)("blockquote",null,(0,s.mdx)("p",{parentName:"blockquote"},(0,s.mdx)("strong",{parentName:"p"},"Note:")," The parentheses are necessary to avoid ambiguity with other syntax.")),(0,s.mdx)("p",null,"Type cast expressions can appear anywhere an expression can appear."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"let val = (value: Type);\nlet obj = { prop: (value: Type) };\nlet arr = ([(value: Type), (value: Type)]: Array<Type>);\n")),(0,s.mdx)("p",null,"The value itself can also be an expression:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"(2 + 2: number);\n")),(0,s.mdx)("p",null,"When you strip the types all that is left is the value."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"(value: Type);\n")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},"value;\n")),(0,s.mdx)("h2",{id:"toc-type-assertions"},"Type Assertions"),(0,s.mdx)("p",null,"Using type cast expressions you can assert that values are certain types."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":5,"startColumn":2,"endLine":5,"endColumn":6,"description":"Cannot cast `value` to string because number [1] is incompatible with string [2]. [incompatible-cast]"}]','[{"startLine":5,"startColumn":2,"endLine":5,"endColumn":6,"description":"Cannot':!0,cast:!0,"`value`":!0,to:!0,string:!0,because:!0,number:!0,"[1]":!0,is:!0,incompatible:!0,with:!0,"[2].":!0,'[incompatible-cast]"}]':!0},"let value = 42;\n\n(value: 42);     // Works!\n(value: number); // Works!\n(value: string); // Error!\n")),(0,s.mdx)("p",null,"Asserting types in this way works the same as types do anywhere else."),(0,s.mdx)("h2",{id:"toc-type-casting"},"Type Casting"),(0,s.mdx)("p",null,"When you write a type cast expression, the result of that expression is the\nvalue with the provided type. If you hold onto the resulting value, it will\nhave the new type."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":8,"startColumn":2,"endLine":8,"endColumn":9,"description":"Cannot cast `newValue` to number literal `42` because number [1] is incompatible with number literal `42` [2]. [incompatible-cast]"}]','[{"startLine":8,"startColumn":2,"endLine":8,"endColumn":9,"description":"Cannot':!0,cast:!0,"`newValue`":!0,to:!0,number:!0,literal:!0,"`42`":!0,because:!0,"[1]":!0,is:!0,incompatible:!0,with:!0,"[2].":!0,'[incompatible-cast]"}]':!0},"let value = 42;\n\n(value: 42);     // Works!\n(value: number); // Works!\n\nlet newValue = (value: number);\n\n(newValue: 42);     // Error!\n(newValue: number); // Works!\n")),(0,s.mdx)("h2",{id:"toc-using-type-cast-expressions"},"Using type cast expressions"),(0,s.mdx)("blockquote",null,(0,s.mdx)("p",{parentName:"blockquote"},(0,s.mdx)("strong",{parentName:"p"},"Note:")," We're going to go through a stripped down example for\ndemonstrating how to make use of type cast expressions. This example is not\nsolved well in practice.")),(0,s.mdx)("h3",{id:"toc-type-casting-through-any"},"Type Casting through any"),(0,s.mdx)("p",null,"Because type casts work the same as all other type annotations, you can only\ncast values to less specific types. You cannot change the type or make it\nsomething more specific."),(0,s.mdx)("p",null,"But you can use ",(0,s.mdx)("a",{parentName:"p",href:"../any"},"any")," to cast to whatever type you want."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:'[{"startLine":4,"startColumn":2,"endLine":4,"endColumn":6,"description":"Cannot cast `value` to string because number [1] is incompatible with string [2]. [incompatible-cast]"},{"startLine":8,"startColumn":2,"endLine":8,"endColumn":9,"description":"Cannot cast `newValue` to number because string [1] is incompatible with number [2]. [incompatible-cast]"}]','[{"startLine":4,"startColumn":2,"endLine":4,"endColumn":6,"description":"Cannot':!0,cast:!0,"`value`":!0,to:!0,string:!0,because:!0,number:!0,"[1]":!0,is:!0,incompatible:!0,with:!0,"[2].":!0,'[incompatible-cast]"},{"startLine":8,"startColumn":2,"endLine":8,"endColumn":9,"description":"Cannot':!0,"`newValue`":!0,'[incompatible-cast]"}]':!0},"let value = 42;\n\n(value: number); // Works!\n(value: string); // Error!\n\nlet newValue = ((value: any): string);\n\n(newValue: number); // Error!\n(newValue: string); // Works!\n")),(0,s.mdx)("p",null,"By casting the value to any, you can then cast to whatever you want."),(0,s.mdx)("p",null,"This is unsafe and not recommended. But it's sometimes useful when you are\ndoing something with a value which is very difficult or impossible to type and\nwant to make sure that the result has the desired type."),(0,s.mdx)("p",null,"For example, the following function for cloning an object."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function cloneObject(obj: any) {\n  const clone: {[string]: mixed} = {};\n\n  Object.keys(obj).forEach(key => {\n    clone[key] = obj[key];\n  });\n\n  return clone;\n}\n")),(0,s.mdx)("p",null,"It would be hard to create a type for this because we're creating a new object\nbased on another object."),(0,s.mdx)("p",null,"If we cast through any, we can return a type which is more useful."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-flow",metastring:"[]","[]":!0},"function cloneObject<T: {+[key: string]: mixed }>(obj: T): T {\n  const clone: {[string]: mixed} = {};\n\n  Object.keys(obj).forEach(key => {\n    clone[key] = obj[key];\n  });\n\n  return ((clone: any): T);\n}\n\nconst clone = cloneObject({\n  foo: 1,\n  bar: true,\n  baz: 'three'\n});\n\n(clone.foo: 1);       // Works!\n(clone.bar: true);    // Works!\n(clone.baz: 'three'); // Works!\n")))}c.isMDXComponent=!0}}]);