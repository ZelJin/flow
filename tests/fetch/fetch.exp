Error --------------------------------------------------------------------------------------------------- fetch.js:12:28

Cannot assign `fetch(...)` to `b` because `Response` [1] is incompatible with string [2] in type argument `R` [3].
[incompatible-type-arg]

   fetch.js:12:28
     12| const b: Promise<string> = fetch(myRequest); // incorrect
                                    ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1709:76
   1709| declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                    ^^^^^^^^ [1]
   fetch.js:12:18
     12| const b: Promise<string> = fetch(myRequest); // incorrect
                          ^^^^^^ [2]
   <BUILTINS>/core.js:1935:24
   1935| declare class Promise<+R = mixed> {
                                ^ [3]


Error --------------------------------------------------------------------------------------------------- fetch.js:25:26

Cannot assign `fetch(...)` to `d` because `Blob` [1] is incompatible with `Response` [2] in type argument `R` [3].
[incompatible-type-arg]

   fetch.js:25:26
     25| const d: Promise<Blob> = fetch('image.png'); // incorrect
                                  ^^^^^^^^^^^^^^^^^^

References:
   fetch.js:25:18
     25| const d: Promise<Blob> = fetch('image.png'); // incorrect
                          ^^^^ [1]
   <BUILTINS>/bom.js:1709:76
   1709| declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                    ^^^^^^^^ [2]
   <BUILTINS>/core.js:1935:24
   1935| declare class Promise<+R = mixed> {
                                ^ [3]


Error -------------------------------------------------------------------------------------------------- headers.js:3:23

Cannot call `Headers` with `''Content-T...'` bound to `init` because: [incompatible-call]
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with array type [3].
 - Or string [1] is incompatible with object type [4].

   headers.js:3:23
      3| const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1563:20
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1563:30
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1563:56
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error -------------------------------------------------------------------------------------------------- headers.js:4:23

Cannot call `Headers` with array literal bound to `init` because: [incompatible-call]
 - Either string [1] is incompatible with tuple type [2] in array element.
 - Or array literal [3] is incompatible with object type [4].

   headers.js:4:23
      4| const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]

References:
   headers.js:4:24
      4| const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                                ^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1563:36
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                            ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/bom.js:1563:56
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- headers.js:9:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   headers.js:9:3
      9| e.append('Content-Type'); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1571:5
   1571|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:10:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   headers.js:10:3
     10| e.append({'Content-Type': 'image/jpeg'}); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1571:5
   1571|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- headers.js:10:10

Cannot call `e.append` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   headers.js:10:10
     10| e.append({'Content-Type': 'image/jpeg'}); // not correct
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1571:18
   1571|     append(name: string, value: string): void;
                          ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- headers.js:12:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   headers.js:12:3
     12| e.set('Content-Type'); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1578:5
   1578|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:13:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   headers.js:13:3
     13| e.set({'Content-Type': 'image/jpeg'}); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1578:5
   1578|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:13:7

Cannot call `e.set` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   headers.js:13:7
     13| e.set({'Content-Type': 'image/jpeg'}); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1578:15
   1578|     set(name: string, value: string): void;
                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:15:20

Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `Headers` [2]. [incompatible-type]

   headers.js:15:20
     15| const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1571:42
   1571|     append(name: string, value: string): void;
                                                  ^^^^ [1]
   headers.js:15:10
     15| const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                  ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:17:19

Cannot assign `e.get(...)` to `g` because null [1] is incompatible with string [2]. [incompatible-type]

   headers.js:17:19
     17| const g: string = e.get('Content-Type'); // correct
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1575:24
   1575|     get(name: string): null | string;
                                ^^^^ [1]
   headers.js:17:10
     17| const g: string = e.get('Content-Type'); // correct
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:18:19

Cannot assign `e.get(...)` to `h` because null [1] is incompatible with number [2]. [incompatible-type]

   headers.js:18:19
     18| const h: number = e.get('Content-Type'); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1575:24
   1575|     get(name: string): null | string;
                                ^^^^ [1]
   headers.js:18:10
     18| const h: number = e.get('Content-Type'); // not correct
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:18:19

Cannot assign `e.get(...)` to `h` because string [1] is incompatible with number [2]. [incompatible-type]

   headers.js:18:19
     18| const h: number = e.get('Content-Type'); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1575:31
   1575|     get(name: string): null | string;
                                       ^^^^^^ [1]
   headers.js:18:10
     18| const h: number = e.get('Content-Type'); // not correct
                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- headers.js:28:3

Cannot call `e.getAll` because property `getAll` is missing in `Headers` [1]. [prop-missing]

   headers.js:28:3
   28| e.getAll('content-type'); // incorrect
         ^^^^^^

References:
   headers.js:7:10
    7| const e: Headers = new Headers(); // correct
                ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- request.js:2:24

Cannot call `Request` because: [incompatible-call]
 - Either undefined [1] is incompatible with `Request` [2].
 - Or undefined [1] is incompatible with `URL` [3].
 - Or undefined [1] is incompatible with string [4].

   request.js:2:24
      2| const a: Request = new Request(); // incorrect
                                ^^^^^^^

References:
   request.js:2:20
      2| const a: Request = new Request(); // incorrect
                            ^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1615:20
   1615| type RequestInfo = Request | URL | string;
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1615:30
   1615| type RequestInfo = Request | URL | string;
                                      ^^^ [3]
   <BUILTINS>/bom.js:1615:36
   1615| type RequestInfo = Request | URL | string;
                                            ^^^^^^ [4]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because `Request` [1] is not a subtype of `RequestOptions` [2]. Class
instances are not subtypes of object types; consider rewriting `RequestOptions` [2] as an interface.
[class-object-subtyping]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   request.js:4:10
      4| const c: Request = new Request(b); // correct
                  ^^^^^^^ [1]
   <BUILTINS>/bom.js:1668:44
   1668|     constructor(input: RequestInfo, init?: RequestOptions): void;
                                                    ^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because property `signal` is read-only in `Request` [1] but writable in
`RequestOptions` [2]. [incompatible-variance]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   request.js:4:10
      4| const c: Request = new Request(b); // correct
                  ^^^^^^^ [1]
   <BUILTINS>/bom.js:1668:44
   1668|     constructor(input: RequestInfo, init?: RequestOptions): void;
                                                    ^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with literal union [2] in property
`cache`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1619:11
   1619|   cache?: CacheType,
                   ^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1673:12
   1673|     cache: CacheType;
                    ^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with literal union [2] in property
`credentials`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1620:17
   1620|   credentials?: CredentialsType,
                         ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1674:18
   1674|     credentials: CredentialsType;
                          ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because array type [1] is incompatible with `Headers` [2] in property
`headers`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1621:13
   1621|   headers?: HeadersInit,
                     ^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1675:14
   1675|     headers: Headers;
                      ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because object type [1] is incompatible with `Headers` [2] in property
`headers`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1621:13
   1621|   headers?: HeadersInit,
                     ^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1675:14
   1675|     headers: Headers;
                      ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with `Headers` [2] in property
`headers`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1621:13
   1621|   headers?: HeadersInit,
                     ^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1675:14
   1675|     headers: Headers;
                      ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with string [2] in property
`integrity`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1622:15
   1622|   integrity?: string,
                       ^^^^^^ [1]
   <BUILTINS>/bom.js:1676:16
   1676|     integrity: string;
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with string [2] in property
`method`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1624:12
   1624|   method?: string,
                    ^^^^^^ [1]
   <BUILTINS>/bom.js:1677:13
   1677|     method: string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with literal union [2] in property
`mode`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1625:10
   1625|   mode?: ModeType,
                  ^^^^^^^^ [1]
   <BUILTINS>/bom.js:1678:11
   1678|     mode: ModeType;
                   ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with literal union [2] in property
`redirect`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1626:14
   1626|   redirect?: RedirectType,
                      ^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1679:15
   1679|     redirect: RedirectType;
                       ^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with string [2] in property
`referrer`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1627:14
   1627|   referrer?: string,
                      ^^^^^^ [1]
   <BUILTINS>/bom.js:1680:15
   1680|     referrer: string;
                       ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because undefined [1] is incompatible with literal union [2] in property
`referrerPolicy`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1628:20
   1628|   referrerPolicy?: ReferrerPolicyType,
                            ^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1681:21
   1681|     referrerPolicy: ReferrerPolicyType;
                             ^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:8:32

Cannot call `Request` with object literal bound to `input` because: [incompatible-call]
 - Either object literal [1] is incompatible with `Request` [2].
 - Or object literal [1] is incompatible with `URL` [3].

   request.js:8:32
      8| const f: Request = new Request({}) // incorrect
                                        ^^ [1]

References:
   <BUILTINS>/bom.js:1615:20
   1615| type RequestInfo = Request | URL | string;
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1615:30
   1615| type RequestInfo = Request | URL | string;
                                      ^^^ [3]


Error ------------------------------------------------------------------------------------------------- request.js:24:10

Cannot call `h.text().then` because: [incompatible-call]
 - Either `Buffer` [1] is incompatible with string [2] in the first parameter.
 - Or function [3] is incompatible with literal union [4].

   request.js:24:10
     24| h.text().then((t: Buffer) => t); // incorrect
                  ^^^^

References:
   request.js:24:19
     24| h.text().then((t: Buffer) => t); // incorrect
                           ^^^^^^ [1]
   <BUILTINS>/bom.js:1691:21
   1691|     text(): Promise<string>;
                             ^^^^^^ [2]
   request.js:24:15
     24| h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/core.js:1955:18
   1955|       onFulfill: null | void,
                          ^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- request.js:26:17

Cannot call `h.arrayBuffer().then` because: [incompatible-call]
 - Either `ArrayBuffer` [1] is incompatible with `Buffer` [2] in the first parameter.
 - Or function [3] is incompatible with literal union [4].

   request.js:26:17
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                         ^^^^

References:
   <BUILTINS>/bom.js:1687:28
   1687|     arrayBuffer(): Promise<ArrayBuffer>;
                                    ^^^^^^^^^^^ [1]
   request.js:26:27
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                   ^^^^^^ [2]
   request.js:26:22
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                              ^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/core.js:1955:18
   1955|       onFulfill: null | void,
                          ^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- request.js:56:12

Cannot call `Request` with object literal bound to `init` because in property `headers`: [incompatible-call]
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with array type [3].
 - Or string [1] is incompatible with object type [4].

   request.js:56:12
     56|   headers: 'Content-Type: image/jpeg',
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1563:20
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1563:30
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1563:56
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- request.js:63:28

Cannot call `Request` with object literal bound to `init` because null [1] is incompatible with string [2] in property
`method`. [incompatible-call]

   request.js:63:28
     63| new Request('/', { method: null }); // incorrect
                                    ^^^^ [1]

References:
   <BUILTINS>/bom.js:1624:12
   1624|   method?: string,
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:8:28

Cannot call `Response` with object literal bound to `init` because string [1] is incompatible with number [2] in
property `status`. [incompatible-call]

   response.js:8:28
      8| new Response("", { status: "404" }); // incorrect
                                    ^^^^^ [1]

References:
   <BUILTINS>/bom.js:1635:12
   1635|   status?: number,
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:9:28

Cannot call `Response` with object literal bound to `init` because null [1] is incompatible with number [2] in property
`status`. [incompatible-call]

   response.js:9:28
      9| new Response("", { status: null }); // incorrect
                                    ^^^^ [1]

References:
   <BUILTINS>/bom.js:1635:12
   1635|   status?: number,
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ response.js:13:14

Cannot call `Response` with object literal bound to `init` because in property `headers`: [incompatible-call]
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with array type [3].
 - Or string [1] is incompatible with object type [4].

   response.js:13:14
     13|     headers: "'Content-Type': 'image/jpeg'"
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1563:20
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1563:30
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1563:56
   1563| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ response.js:30:34

Cannot call `Response` with object literal bound to `input` because: [incompatible-call]
 - Either object literal [1] is incompatible with `URLSearchParams` [2].
 - Or object literal [1] is incompatible with `FormData` [3].
 - Or object literal [1] is incompatible with `Blob` [4].
 - Or object literal [1] is incompatible with `ArrayBuffer` [5].
 - Or object literal [1] is incompatible with `$TypedArrayInternal` [6].
 - Or object literal [1] is incompatible with `BigInt64Array` [7].
 - Or object literal [1] is incompatible with `BigUint64Array` [8].
 - Or object literal [1] is incompatible with `DataView` [9].
 - Or object literal [1] is incompatible with `ReadableStream` [10].

   response.js:30:34
                                          v
     30| const i: Response = new Response({
     31|     status: 404,
     32|     headers: new Headers({
     33|         'Content-Type': 'image/jpeg'
     34|     })
     35| }); // incorrect
         ^ [1]

References:
   <BUILTINS>/bom.js:1613:26
   1613| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                  ^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/bom.js:1613:44
   1613| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                    ^^^^^^^^ [3]
   <BUILTINS>/bom.js:1613:55
   1613| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                               ^^^^ [4]
   <BUILTINS>/bom.js:1613:62
   1613| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                                      ^^^^^^^^^^^ [5]
   <BUILTINS>/core.js:2063:20
   2063| type $TypedArray = $TypedArrayNumber | BigInt64Array | BigUint64Array;
                            ^^^^^^^^^^^^^^^^^ [6]
   <BUILTINS>/core.js:2063:40
   2063| type $TypedArray = $TypedArrayNumber | BigInt64Array | BigUint64Array;
                                                ^^^^^^^^^^^^^ [7]
   <BUILTINS>/core.js:2063:56
   2063| type $TypedArray = $TypedArrayNumber | BigInt64Array | BigUint64Array;
                                                                ^^^^^^^^^^^^^^ [8]
   <BUILTINS>/core.js:2059:39
   2059| type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ [9]
   <BUILTINS>/bom.js:1613:95
   1613| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                                                                       ^^^^^^^^^^^^^^ [10]


Error ------------------------------------------------------------------------------------------------ response.js:42:10

Cannot call `h.text().then` because: [incompatible-call]
 - Either `Buffer` [1] is incompatible with string [2] in the first parameter.
 - Or function [3] is incompatible with literal union [4].

   response.js:42:10
     42| h.text().then((t: Buffer) => t); // incorrect
                  ^^^^

References:
   response.js:42:19
     42| h.text().then((t: Buffer) => t); // incorrect
                           ^^^^^^ [1]
   <BUILTINS>/bom.js:1664:21
   1664|     text(): Promise<string>;
                             ^^^^^^ [2]
   response.js:42:15
     42| h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/core.js:1955:18
   1955|       onFulfill: null | void,
                          ^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ response.js:44:17

Cannot call `h.arrayBuffer().then` because: [incompatible-call]
 - Either `ArrayBuffer` [1] is incompatible with `Buffer` [2] in the first parameter.
 - Or function [3] is incompatible with literal union [4].

   response.js:44:17
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                         ^^^^

References:
   <BUILTINS>/bom.js:1660:28
   1660|     arrayBuffer(): Promise<ArrayBuffer>;
                                    ^^^^^^^^^^^ [1]
   response.js:44:27
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                   ^^^^^^ [2]
   response.js:44:22
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                              ^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/core.js:1955:18
   1955|       onFulfill: null | void,
                          ^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:4:31

Cannot call `URLSearchParams` with array literal bound to `init` because: [incompatible-call]
 - Either string [1] is incompatible with tuple type [2] in array element.
 - Or array literal [3] is incompatible with object type [4].

   urlsearchparams.js:4:31
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                       ^^^^^^^^^^^^^^^^^^ [3]

References:
   urlsearchparams.js:4:32
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                        ^^^^^^ [1]
   <BUILTINS>/bom.js:1587:57
   1587|     constructor(init?: string | URLSearchParams | Array<[string, string]> | { [string]: string, ... } ): void;
                                                                 ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/bom.js:1587:77
   1587|     constructor(init?: string | URLSearchParams | Array<[string, string]> | { [string]: string, ... } ): void;
                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------- urlsearchparams.js:9:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:9:3
      9| e.append('key1'); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1588:5
   1588|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:10:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:10:3
     10| e.append({'key1': 'value1'}); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1588:5
   1588|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:10:10

Cannot call `e.append` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   urlsearchparams.js:10:10
     10| e.append({'key1': 'value1'}); // not correct
                  ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1588:18
   1588|     append(name: string, value: string): void;
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:12:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:12:3
     12| e.set('key1'); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1596:5
   1596|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:13:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:13:3
     13| e.set({'key1': 'value1'}); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1596:5
   1596|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:13:7

Cannot call `e.set` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   urlsearchparams.js:13:7
     13| e.set({'key1': 'value1'}); // not correct
               ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1596:15
   1596|     set(name: string, value: string): void;
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:15:28

Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `URLSearchParams` [2].
[incompatible-type]

   urlsearchparams.js:15:28
     15| const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1588:42
   1588|     append(name: string, value: string): void;
                                                  ^^^^ [1]
   urlsearchparams.js:15:10
     15| const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                  ^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:17:19

Cannot assign `e.get(...)` to `g` because null [1] is incompatible with string [2]. [incompatible-type]

   urlsearchparams.js:17:19
     17| const g: string = e.get('key1'); // correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1592:24
   1592|     get(name: string): null | string;
                                ^^^^ [1]
   urlsearchparams.js:17:10
     17| const g: string = e.get('key1'); // correct
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:18:19

Cannot assign `e.get(...)` to `h` because null [1] is incompatible with number [2]. [incompatible-type]

   urlsearchparams.js:18:19
     18| const h: number = e.get('key1'); // not correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1592:24
   1592|     get(name: string): null | string;
                                ^^^^ [1]
   urlsearchparams.js:18:10
     18| const h: number = e.get('key1'); // not correct
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:18:19

Cannot assign `e.get(...)` to `h` because string [1] is incompatible with number [2]. [incompatible-type]

   urlsearchparams.js:18:19
     18| const h: number = e.get('key1'); // not correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1592:31
   1592|     get(name: string): null | string;
                                       ^^^^^^ [1]
   urlsearchparams.js:18:10
     18| const h: number = e.get('key1'); // not correct
                  ^^^^^^ [2]



Found 51 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
